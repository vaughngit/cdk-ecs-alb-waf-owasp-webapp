import { Stack, StackProps, Duration, CfnOutput, Tags, RemovalPolicy } from 'aws-cdk-lib';
import { Construct } from 'constructs';
//import {CfnWebACL, CfnWebACLAssociation} from "aws-cdk-lib/aws-wafv2";
import { aws_wafv2 as wafv2 } from 'aws-cdk-lib';
import {aws_ssm as ssm } from 'aws-cdk-lib' 
import * as logs from 'aws-cdk-lib/aws-logs';
import * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2'

interface IStackProps extends StackProps {
  solutionName: string; 
  serviceName: string ; 
  env: object; 
  environment: string 
}


export class WAFv2Stack extends Stack {

 

  constructor(scope: Construct, id: string, props: IStackProps) {
    super(scope, id, props);

  const ruleProperty: wafv2.CfnWebACL.RuleProperty = {
    name: 'BlockQueriesContainingSubString',
    priority: 2,
    action: { block: {} },
    statement: {
      byteMatchStatement: {
        searchString: 'blockme',
        fieldToMatch: {queryString: {}},
        positionalConstraint: "CONTAINS",
        textTransformations: [{
          priority: 0,
          type: 'NONE',
        }]
      }, 
    },
    visibilityConfig: {
      cloudWatchMetricsEnabled: true,
      metricName: "custom__block_rule",
      sampledRequestsEnabled: true
  }
  }


     // Add Web ACL and rules
  const  exampleWebAcl = new wafv2.CfnWebACL(this, "web-acl", {
    defaultAction: {
        allow: {},
    },
    name: `${props.serviceName}-waf`, 
    description: "cdk WAF deployment", 
    scope: "REGIONAL",
    visibilityConfig: {
        cloudWatchMetricsEnabled: true,
        metricName: "webACL",
        sampledRequestsEnabled: true
    },
    rules: [
      {
        //This group contains rules that are based on Amazon threat intelligence. This is useful if you would like to block sources associated with bots or other threats.
        name: "AWS-AWSManagedRulesAmazonIpReputationList",
        priority: 1,
        overrideAction: {none: {}},
        statement: {
            managedRuleGroupStatement: {
                name: "AWSManagedRulesAmazonIpReputationList",
                vendorName: "AWS",
               // excludedRules: [{name: "SizeRestrictions_BODY"}]
            }
        },
        visibilityConfig: {
            cloudWatchMetricsEnabled: true,
            metricName: "AmazonIpReputationRules",
            sampledRequestsEnabled: true
        }
    },  
      {
        //Core rule set : Contains rules that are generally applicable to web applications. 
        // This provides protection against exploitation of a wide range of vulnerabilities, including those described in OWASP publications.    
        name: "AWS-AWSManagedRulesCommonRuleSet",
            priority: 3,
            overrideAction: {none: {}},
            statement: {
                managedRuleGroupStatement: {
                    name: "AWSManagedRulesCommonRuleSet",
                    vendorName: "AWS",
                    excludedRules: [{name: "SizeRestrictions_BODY"}]
                }
            },
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: "awsCommonRules",
                sampledRequestsEnabled: true
            }
      },
      ruleProperty
    ]
});

   const albArn =  ssm.StringParameter.valueFromLookup(this, `/${props.solutionName}/${props.environment}/ALB/ARN`)

   const demoWaf = new wafv2.CfnWebACLAssociation(this, "web-acl-association", {
      webAclArn: exampleWebAcl.attrArn,
      resourceArn: albArn,
    });


  const wafLogGroup =  new logs.LogGroup(this, 'create LogGroup', {
      logGroupName: `aws-waf-logs-${props.solutionName}`, // Autogenerated log group name
      retention: logs.RetentionDays.ONE_WEEK,
      removalPolicy: RemovalPolicy.DESTROY
  });

    // new wafv2.CfnLoggingConfiguration(this, 'MyCfnLoggingConfiguration', {
    //   logDestinationConfigs: [wafLogGroup.logGroupArn.toString()],
    //   resourceArn: exampleWebAcl.attrArn,
    // });


  const alb =  elbv2.ApplicationLoadBalancer.fromLookup(this, "import alb", {loadBalancerArn: albArn})

  Tags.of(this).add("service", props.serviceName)

    
    // new CfnOutput(this, 'LoadBalancerDNS', { value: 'http://'+alb.loadBalancerDnsName, });
    new CfnOutput(this, 'AclConsoleUrl', {value: `https://console.aws.amazon.com/wafv2/homev2/web-acls?${this.region}`})
    new CfnOutput(this, 'BlockedExampleUrl', { value: `http://${alb.loadBalancerDnsName}/?blockme`})



  }
}
