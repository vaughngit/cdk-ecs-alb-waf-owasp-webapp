import { Stack, StackProps, Duration, CfnOutput, Tags, RemovalPolicy } from 'aws-cdk-lib';
import { Construct } from 'constructs';
//import {CfnWebACL, CfnWebACLAssociation} from "aws-cdk-lib/aws-wafv2";
import { aws_wafv2 as wafv2 } from 'aws-cdk-lib';
import {aws_ssm as ssm } from 'aws-cdk-lib' 
import * as logs from 'aws-cdk-lib/aws-logs';
import * as elbv2 from 'aws-cdk-lib/aws-elasticloadbalancingv2'

interface IStackProps extends StackProps {
  solutionName: string; 
  serviceName: string ; 
  env: object; 
  environment: string; 
  costcenter: string; 
  dtstamp: string;  
}


export class WAFv2Stack extends Stack {

 

  constructor(scope: Construct, id: string, props: IStackProps) {
    super(scope, id, props);

  
  // Amazon Free Rule
  const amazonIpReputationList: wafv2.CfnWebACL.RuleProperty = {
        //This group contains rules that are based on Amazon threat intelligence. This is useful if you would like to block sources associated with bots or other threats.
        name: "AWS-AWSManagedRulesAmazonIpReputationList",
        priority: 1,
        overrideAction: {none: {}},
        statement: {
            managedRuleGroupStatement: {
                name: "AWSManagedRulesAmazonIpReputationList",
                vendorName: "AWS"
            }
        },
        visibilityConfig: {
            cloudWatchMetricsEnabled: true,
            metricName: "AmazonIpReputationRules",
            sampledRequestsEnabled: true
        }
  }

  // CommonRule Set 
  const awsManagedRulesCommonRuleSet: wafv2.CfnWebACL.RuleProperty = { 
     //Core rule set : Contains rules that are generally applicable to web applications. 
        // This provides protection against exploitation of a wide range of vulnerabilities, including those described in OWASP publications.    
        name: "AWS-AWSManagedRulesCommonRuleSet",
            priority: 2,
            overrideAction: {none: {}},
            statement: {
                managedRuleGroupStatement: {
                    name: "AWSManagedRulesCommonRuleSet",
                    vendorName: "AWS",
                    excludedRules: [{name: "SizeRestrictions_BODY"}]
                }
            },
            visibilityConfig: {
                cloudWatchMetricsEnabled: true,
                metricName: "awsCommonRules",
                sampledRequestsEnabled: true
            }
  }


  
        // Custom Rule
        const blockQueryRule: wafv2.CfnWebACL.RuleProperty = {
          name: 'BlockQueriesContainingSubString',
          priority: 3,
          action: { block: {} },
          statement: {
            byteMatchStatement: {
              searchString: 'blockme',
              fieldToMatch: {queryString: {}},
              positionalConstraint: "CONTAINS",
              textTransformations: [{
                priority: 0,
                type: 'NONE',
              }]
            }, 
          },
          visibilityConfig: {
            cloudWatchMetricsEnabled: true,
            metricName: "custom__block_rule",
            sampledRequestsEnabled: true
          }
  }

  // Create WAF aka Web ACL 
  const  exampleWebAcl = new wafv2.CfnWebACL(this, "web-acl", {
    defaultAction: {
        allow: {},
    },
    name: `${props.serviceName}-waf`, 
    description: "cdk WAF deployment", 
    scope: "REGIONAL",
    visibilityConfig: {
        cloudWatchMetricsEnabled: true,
        metricName: "webACL",
        sampledRequestsEnabled: true
    },
    rules: [
      awsManagedRulesCommonRuleSet,
      amazonIpReputationList,
      blockQueryRule
    ]
  });

    // Import ALB ARN from SSM Parameter Store
    // This parameter is created by the EcsAutoscaleWebappStack
    const albArnParam = ssm.StringParameter.fromStringParameterName(
      this,
      'AlbArnParameter',
      `/${props.solutionName}/${props.environment}/ALB/ARN`
    );
    
    // Get the ALB ARN value
    const albArn = albArnParam.stringValue;

    // Associate the WAF to the ALB
    const demoWaf = new wafv2.CfnWebACLAssociation(this, "web-acl-association", {
      webAclArn: exampleWebAcl.attrArn,
      resourceArn: albArn,
    });
    
    // Add dependency to ensure the parameter exists before trying to use it
    demoWaf.node.addDependency(albArnParam);


// create log group to capture and store WAF logs 
  const wafLogGroup =  new logs.LogGroup(this, 'create LogGroup', {
      logGroupName: `aws-waf-logs-${props.solutionName}`, // Autogenerated log group name
      retention: logs.RetentionDays.ONE_WEEK,
      removalPolicy: RemovalPolicy.DESTROY
  });

  /*
    // Create logging configuration with log group as destination
  new CfnLoggingConfiguration(scope, "webAclLoggingConfiguration", {
    logDestinationConfigs: [
      // Construct the different ARN format from the logGroupName
      Stack.of(this).formatArn({
        arnFormat: ArnFormat.COLON_RESOURCE_NAME,
        service: "logs",
        resource: "log-group",
        resourceName: webAclLogGroup.logGroupName,
      })
    ],
    resourceArn: aclArn // Arn of Acl
  });
  */

   // Associate WAF with CloudWatch Log Group for logging
   new wafv2.CfnLoggingConfiguration(this, 'WafLoggingConfiguration', {
      // Use the proper ARN format for the log destination
      logDestinationConfigs: [
        // Format: arn:aws:logs:region:account-id:log-group:log-group-name
        `arn:aws:logs:${this.region}:${this.account}:log-group:${wafLogGroup.logGroupName}`
      ],
      resourceArn: exampleWebAcl.attrArn,
      // Enable redacted fields if you want to protect sensitive data
      redactedFields: [
        // Uncomment and customize if you need to redact specific fields
        // { singleHeader: { name: 'authorization' } },
        // { queryString: {} }
      ]
    });
    
    // Add a dependency to ensure the log group exists before the logging configuration
    wafLogGroup.node.addDependency(exampleWebAcl);

  Tags.of(this).add("service", props.serviceName)
  Tags.of(this).add("solution", props.solutionName)
  Tags.of(this).add("environment", props.environment)
  Tags.of(this).add("costcenter", props.costcenter)
  Tags.of(this).add("updatetimestamp", props.dtstamp)

  // Output the WAF console URL for easy access
  new CfnOutput(this, 'AclConsoleUrl', {
    value: `https://console.aws.amazon.com/wafv2/homev2/web-acls?${this.region}`,
    description: 'URL to access the WAF console'
  });
  
  // Output a note about testing the WAF
  new CfnOutput(this, 'TestingInstructions', {
    value: 'To test the WAF, append ?blockme to the ALB URL',
    description: 'Instructions for testing the WAF blocking rule'
  });



  }
}
